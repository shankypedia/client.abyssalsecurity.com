// AbyssalSecurity Client Portal Prisma Schema
// Comprehensive database schema with security, relationships and indexes

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  username               String    @unique
  password               String
  
  // Security fields
  failedLoginAttempts    Int       @default(0) @map("failed_login_attempts")
  lockedUntil           DateTime? @map("locked_until")
  lastLogin             DateTime? @map("last_login")
  lastLoginIp           String?   @map("last_login_ip")
  passwordChangedAt     DateTime  @default(now()) @map("password_changed_at")
  
  // Profile fields
  firstName             String?   @map("first_name")
  lastName              String?   @map("last_name")
  phoneNumber           String?   @map("phone_number")
  
  // Account status
  isActive              Boolean   @default(true) @map("is_active")
  isVerified            Boolean   @default(false) @map("is_verified")
  emailVerifiedAt       DateTime? @map("email_verified_at")
  
  // Two-factor authentication
  twoFactorEnabled      Boolean   @default(false) @map("two_factor_enabled")
  twoFactorSecret       String?   @map("two_factor_secret")
  backupCodes           String?   @map("backup_codes") // JSON array of backup codes
  
  // User preferences
  timezone              String    @default("UTC")
  language              String    @default("en")
  theme                 String    @default("dark")
  
  // Timestamps
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  // Relations
  securityLogs          SecurityLog[]
  sessions              Session[]
  apiKeys               ApiKey[]
  userSettings          UserSetting[]
  notifications         Notification[]
  auditLogs             AuditLog[] @relation("AuditLogPerformedBy")
  
  @@index([email])
  @@index([username])
  @@index([lastLogin])
  @@index([lockedUntil])
  @@index([isActive])
  @@index([createdAt])
  @@map("users")
}

model SecurityLog {
  id                    String              @id @default(cuid())
  userId                String?             @map("user_id")
  eventType             SecurityEventType   @map("event_type")
  severity              SecurityLogSeverity @default(INFO)
  message               String
  details               Json?               // Structured data instead of JSON string
  
  // Request context
  ipAddress             String              @map("ip_address")
  userAgent             String?             @map("user_agent")
  endpoint              String?
  method                String?
  statusCode            Int?                @map("status_code")
  
  // Tracking
  requestId             String?             @map("request_id")
  sessionId             String?             @map("session_id")
  
  // Geolocation data (optional)
  country               String?
  region                String?
  city                  String?
  
  // Resolution tracking
  resolved              Boolean             @default(false)
  resolvedAt            DateTime?           @map("resolved_at")
  resolvedBy            String?             @map("resolved_by")
  
  // Timestamps
  createdAt             DateTime            @default(now()) @map("created_at")
  
  // Relations
  user                  User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([eventType])
  @@index([ipAddress])
  @@index([createdAt])
  @@index([severity])
  @@index([resolved])
  @@index([requestId])
  @@map("security_logs")
}

model Session {
  id                    String    @id @default(cuid())
  userId                String    @map("user_id")
  sessionToken          String    @unique @map("session_token")
  
  // Session context
  ipAddress             String    @map("ip_address")
  userAgent             String?   @map("user_agent")
  fingerprint           String?   // Browser fingerprint
  
  // Session status
  isActive              Boolean   @default(true) @map("is_active")
  isSuspicious          Boolean   @default(false) @map("is_suspicious")
  revokedAt             DateTime? @map("revoked_at")
  revokedBy             String?   @map("revoked_by")
  
  // Activity tracking
  lastActivity          DateTime  @default(now()) @map("last_activity")
  
  // Device information
  deviceInfo            Json?     @map("device_info") // Structured device details
  
  // Timestamps
  createdAt             DateTime  @default(now()) @map("created_at")
  expiresAt             DateTime  @map("expires_at")
  
  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
  @@index([lastActivity])
  @@index([isActive])
  @@index([ipAddress])
  @@map("sessions")
}

model ApiKey {
  id                    String    @id @default(cuid())
  userId                String    @map("user_id")
  name                  String
  keyHash               String    @unique @map("key_hash")
  
  // Permissions
  scopes                Json      // Array of permissions/scopes
  
  // Status
  isActive              Boolean   @default(true) @map("is_active")
  
  // Usage tracking
  lastUsedAt            DateTime? @map("last_used_at")
  usageCount            Int       @default(0) @map("usage_count")
  
  // Security
  revokedAt             DateTime? @map("revoked_at")
  revokedBy             String?   @map("revoked_by")
  
  // Timestamps
  createdAt             DateTime  @default(now()) @map("created_at")
  expiresAt             DateTime? @map("expires_at")
  
  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([keyHash])
  @@index([isActive])
  @@index([createdAt])
  @@map("api_keys")
}

model UserSetting {
  id                    String    @id @default(cuid())
  userId                String    @map("user_id")
  key                   String
  value                 Json
  
  // Timestamps
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, key])
  @@index([userId])
  @@map("user_settings")
}

model Notification {
  id                    String             @id @default(cuid())
  userId                String             @map("user_id")
  
  // Content
  title                 String
  message               String
  type                  NotificationType   @default(INFO)
  category              String?
  
  // Delivery
  isRead                Boolean            @default(false) @map("is_read")
  readAt                DateTime?          @map("read_at")
  
  // Metadata
  data                  Json?
  expiresAt             DateTime?          @map("expires_at")
  
  // Timestamps
  createdAt             DateTime           @default(now()) @map("created_at")
  
  // Relations
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("notifications")
}

model SystemConfig {
  id                    String    @id @default(cuid())
  key                   String    @unique
  value                 Json
  description           String?
  category              String    @default("general")
  
  // Timestamps
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  @@index([key])
  @@index([category])
  @@map("system_config")
}

model AuditLog {
  id                    String    @id @default(cuid())
  
  // Entity details
  entityType            String    @map("entity_type") // e.g., "User", "Session", "ApiKey"
  entityId              String    @map("entity_id")
  
  // Action details
  action                String    // e.g., "CREATE", "UPDATE", "DELETE"
  changes               Json?     // Before/after values
  
  // Context
  performedBy           String?   @map("performed_by") // User ID
  ipAddress             String?   @map("ip_address")
  userAgent             String?   @map("user_agent")
  
  // Timestamps
  createdAt             DateTime  @default(now()) @map("created_at")
  
  // Relations
  performer             User?     @relation("AuditLogPerformedBy", fields: [performedBy], references: [id], onDelete: SetNull)
  
  @@index([entityType, entityId])
  @@index([action])
  @@index([performedBy])
  @@index([createdAt])
  @@map("audit_logs")
}

model RateLimitEntry {
  id                    String    @id @default(cuid())
  identifier            String    // IP address or user ID
  endpoint              String    // API endpoint
  count                 Int       @default(1)
  resetAt               DateTime  @map("reset_at")
  
  // Timestamps
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  @@unique([identifier, endpoint])
  @@index([identifier])
  @@index([endpoint])
  @@index([resetAt])
  @@map("rate_limit_entries")
}

// Enums
enum SecurityEventType {
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGIN_BLOCKED
  LOGOUT
  PASSWORD_CHANGED
  EMAIL_CHANGED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  SESSION_CREATED
  SESSION_EXPIRED
  SESSION_REVOKED
  SUSPICIOUS_ACTIVITY
  API_KEY_CREATED
  API_KEY_REVOKED
  API_KEY_USED
  RATE_LIMIT_EXCEEDED
  CSRF_TOKEN_MISMATCH
  INVALID_TOKEN
  BRUTE_FORCE_ATTEMPT
  SECURITY_SCAN_DETECTED
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  BACKUP_CODES_GENERATED
  
  @@map("security_event_type")
}

enum SecurityLogSeverity {
  DEBUG
  INFO
  WARN
  ERROR
  CRITICAL
  
  @@map("security_log_severity")
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SECURITY
  
  @@map("notification_type")
}

